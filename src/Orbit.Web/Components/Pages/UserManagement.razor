@page "/kullanici-yonetimi"

<PageTitle>User Management</PageTitle>

<div class="max-w-6xl mx-auto">
    <h1 class="text-3xl font-bold mb-6">User Management</h1>

    <div class="mb-6 flex items-center gap-2">
        <button class='@GetTabClass("role")' @onclick='() => SetTab("role")'>Role Creation</button>
        <button class='@GetTabClass("permissions")' @onclick='() => SetTab("permissions")'>Role Permission Management</button>
        <button class='@GetTabClass("user")' @onclick='() => SetTab("user")'>User Creation</button>
    </div>

    @if (activeTab == "role")
    {
        <div class="space-y-6 bg-content-light dark:bg-content-dark border border-border-light dark:border-border-dark rounded-lg p-6 shadow-sm">
			<div class="grid grid-cols-1 md:grid-cols-3 gap-4">
				<div>
					<label class="block text-sm font-medium mb-2">Role Name</label>
					<input @bind="roleName" placeholder="Enter role name"
						   class="block w-full appearance-none rounded-md border border-border-light dark:border-border-dark bg-content-light dark:bg-content-dark px-3 py-2 text-text-light dark:text-text-dark placeholder-subtext-light dark:placeholder-subtext-dark focus:outline-none focus:border-primary focus:ring-1 focus:ring-primary sm:text-sm" />
				</div>
				<div class="md:col-span-2">
					<label class="block text-sm font-medium mb-2">Role Description</label>
					<input @bind="roleDescription" placeholder="Enter role description"
						   class="block w-full appearance-none rounded-md border border-border-light dark:border-border-dark bg-content-light dark:bg-content-dark px-3 py-2 text-text-light dark:text-text-dark placeholder-subtext-light dark:placeholder-subtext-dark focus:outline-none focus:border-primary focus:ring-1 focus:ring-primary sm:text-sm" />
				</div>
			</div>
			<div class="pt-2 flex justify-end">
				<button @onclick="CreateRoleAsync" class="rounded-md bg-primary text-white font-semibold px-6 py-2.5 hover:bg-primary/90 focus:outline-none focus:ring-2 focus:ring-primary">
					Create Role
				</button>
			</div>

			<div class="overflow-x-auto">
				<DataGrid TItem="Orbit.Application.Authorization.RoleDto"
						 Items="roles"
						 Title="Roles"
						 EnablePaging="false"
						 Loading="loadingRoles">
					<HeaderTemplate>
						<th class="px-6 py-3">Name</th>
						<th class="px-6 py-3">Description</th>
						<th class="px-6 py-3 text-right">İşlemler</th>
					</HeaderTemplate>
					<RowTemplate>
						<td class="px-6 py-2">
							@if (editRole?.Id == context.Id)
							{
								<input @bind="editRoleName" class="w-full rounded-md border border-border-light dark:border-border-dark bg-content-light dark:bg-content-dark px-2 py-1 text-sm" />
							}
							else { @context.Name }
						</td>
						<td class="px-6 py-2">
							@if (editRole?.Id == context.Id)
							{
								<input @bind="editRoleDescription" class="w-full rounded-md border border-border-light dark:border-border-dark bg-content-light dark:bg-content-dark px-2 py-1 text-sm" />
							}
							else { @context.Description }
						</td>
						<td class="px-6 py-2 text-right space-x-2">
							@if (editRole?.Id == context.Id)
							{
								<button @onclick="() => SaveEditAsync(context.Id)" class="rounded-md bg-primary text-white px-3 py-1">Kaydet</button>
								<button @onclick="CancelEdit" class="rounded-md bg-gray-200 dark:bg-gray-700 px-3 py-1 text-sm">İptal</button>
							}
							else
							{
								<button @onclick="() => BeginEdit(context)" class="rounded-md bg-primary/10 text-primary px-3 py-1 text-sm">Düzenle</button>
								<button @onclick="() => OpenDeleteModal(context.Id, context.Name)" disabled="@(!context.CanDelete)" title="@(!context.CanDelete ? "Bu rol, kullanıcı atanmış olduğu için silinemez" : null)" class="rounded-md px-3 py-1 text-sm @(context.CanDelete ? "bg-red-600" : "bg-gray-200 dark:bg-gray-700 text-gray-500")">Sil</button>
							}
						</td>
					</RowTemplate>
				</DataGrid>
			</div>
		</div>

        <ConfirmDialog Visible="@showDeleteModal"
                       Title="Rolü sil"
                       Message='@($"\"{deleteTargetName}\" rolünü silmek istediğinize emin misiniz?")'
                       ConfirmText="Sil"
                       CancelText="İptal"
                       OnConfirm="ConfirmDeleteAsync"
                       OnCancel="CloseDeleteModal" />
    }
    else if (activeTab == "permissions")
    {
        <div class="text-sm text-subtext-light dark:text-subtext-dark bg-content-light dark:bg-content-dark border border-border-light dark:border-border-dark rounded-lg p-6">Permission management coming soon.</div>
    }
    else
    {
        <div class="text-sm text-subtext-light dark:text-subtext-dark bg-content-light dark:bg-content-dark border border-border-light dark:border-border-dark rounded-lg p-6">User creation coming soon.</div>
    }
</div>

@code {
    [Inject] Orbit.Application.Authorization.IRoleQueries RoleQueries { get; set; } = default!;
    [Inject] Orbit.Application.Authorization.IRoleCommands RoleCommands { get; set; } = default!;
    [Inject] IJSRuntime JS { get; set; } = default!;

    string activeTab = "role";
    string? roleName;
    string? roleDescription;

    List<Orbit.Application.Authorization.RoleDto> roles = new();
    
    Orbit.Application.Authorization.RoleDto? editRole;
    string? editRoleName;
    string? editRoleDescription;
	bool loadingRoles;
    bool showDeleteModal;
    Guid? deleteTargetId;
    string? deleteTargetName;

    string GetTabClass(string tab)
        => (activeTab == tab)
            ? "inline-flex items-center gap-2 rounded-md bg-primary/10 text-primary px-3 py-2 text-sm"
            : "inline-flex items-center gap-2 rounded-md px-3 py-2 text-sm text-subtext-light dark:text-subtext-dark hover:bg-primary/10 hover:text-primary";

    void SetTab(string tab) => activeTab = tab;

    protected override async Task OnInitializedAsync()
    {
        await LoadRolesAsync();
    }

	async Task LoadRolesAsync()
	{
		loadingRoles = true;
		try
		{
			roles = (await RoleQueries.GetAllAsync()).ToList();
		}
		finally
		{
			loadingRoles = false;
		}
		StateHasChanged();
	}

    async Task CreateRoleAsync()
    {
        if (string.IsNullOrWhiteSpace(roleName)) return;
        await RoleCommands.CreateAsync(roleName!, roleDescription);
        roleName = null;
        roleDescription = null;
        await LoadRolesAsync();
    }

    void BeginEdit(Orbit.Application.Authorization.RoleDto r)
    {
        editRole = r;
        editRoleName = r.Name;
        editRoleDescription = r.Description;
    }

    void CancelEdit()
    {
        editRole = null;
        editRoleName = null;
        editRoleDescription = null;
    }

    async Task SaveEditAsync(Guid id)
    {
        if (editRole is null) return;
        await RoleCommands.UpdateAsync(id, editRoleName ?? string.Empty, editRoleDescription);
        CancelEdit();
        await LoadRolesAsync();
    }

    void OpenDeleteModal(Guid id, string name)
    {
        deleteTargetId = id;
        deleteTargetName = name;
        showDeleteModal = true;
    }

    void CloseDeleteModal()
    {
        showDeleteModal = false;
        deleteTargetId = null;
        deleteTargetName = null;
    }

    async Task ConfirmDeleteAsync()
    {
        if (deleteTargetId is null)
            return;

        var deleted = await RoleCommands.DeleteIfNoUsersAsync(deleteTargetId.Value);
        if (deleted)
        {
            CloseDeleteModal();
            await LoadRolesAsync();
        }
    }
}
