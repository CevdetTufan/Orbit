@page "/kullanici-yonetimi"
@using Orbit.Application.Authorization
@using Orbit.Application.Authorization.Models
@using static Orbit.Web.Components.Controls.MessageDialog

<PageTitle>User Management</PageTitle>

<div class="max-w-6xl mx-auto">
	<h1 class="text-3xl font-bold mb-6">User Management</h1>

	<div class="mb-6 flex items-center gap-2">
		<button class='@GetTabClass("role")' @onclick='() => SetTab("role")'>Role Creation</button>
		<button class='@GetTabClass("permissions")' @onclick='() => SetTab("permissions")'>Role Permission Management</button>
		<button class='@GetTabClass("user")' @onclick='() => SetTab("user")'>User Creation</button>
	</div>

	@if (activeTab == "role")
	{
		<div class="space-y-6 bg-content-light dark:bg-content-dark border border-border-light dark:border-border-dark rounded-lg p-6 shadow-sm">
			<div class="overflow-x-auto">
				<DataGrid TItem="RoleDto"
						  Items="roles"
						  Title="Roller"
						  EnableAdd="true"
						  AddButtonText="Yeni Rol"
						  OnAdd="OpenAddRoleModal"
						  EnablePaging="false"
						  Loading="loadingRoles">
					<HeaderTemplate>
						<th class="px-6 py-3">Rol Adı</th>
						<th class="px-6 py-3">Açıklama</th>
						<th class="px-6 py-3 text-right">İşlemler</th>
					</HeaderTemplate>
					<RowTemplate>
						<td class="px-6 py-2">
							@if (editRole?.Id == context.Id)
							{
								<input @bind="editRoleName" class="w-full rounded-md border border-border-light dark:border-border-dark bg-content-light dark:bg-content-dark px-2 py-1 text-sm" />
							}
							else
							{

								@context.Name
							}
						</td>
						<td class="px-6 py-2">
							@if (editRole?.Id == context.Id)
							{
								<input @bind="editRoleDescription" class="w-full rounded-md border border-border-light dark:border-border-dark bg-content-light dark:bg-content-dark px-2 py-1 text-sm" />
							}
							else
							{

								@context.Description
							}
						</td>
						<td class="px-6 py-2 text-right space-x-2">
							@if (editRole?.Id == context.Id)
							{
								<button @onclick="() => SaveEditAsync(context.Id)" class="rounded-md bg-primary  px-3 py-1">Kaydet</button>
								<button @onclick="CancelEditRole" class="rounded-md bg-gray-200 dark:bg-gray-700 px-3 py-1 text-sm">İptal</button>
							}
							else
							{
								<button @onclick="() => BeginEditRole(context)" class="rounded-md bg-primary/10 text-primary px-3 py-1 text-sm">Düzenle</button>
								<button @onclick="() => OpenDeleteModal(context.Id, context.Name)" disabled="@(!context.CanDelete)" title="@(!context.CanDelete ? "Bu rol, kullanıcı atanmış olduğu için silinemez" : null)" class="rounded-md px-3 py-1 text-sm @(context.CanDelete ? "bg-red-600" : "bg-gray-200 dark:bg-gray-700 text-gray-500")">Sil</button>
							}
						</td>
					</RowTemplate>
				</DataGrid>
			</div>
		</div>

		<ConfirmDialog Visible="@showDeleteModal"
					   Title="Rolü sil"
					   Message='@($"\"{deleteTargetName}\" rolünü silmek istediğinize emin misiniz?")'
					   ConfirmText="Sil"
					   CancelText="İptal"
					   OnConfirm="ConfirmDeleteAsync"
					   OnCancel="CloseDeleteModal" />

		<MessageDialog Visible="@showMessageDialog"
					   Type="@messageType"
					   Title="@messageTitle"
					   Message="@messageContent"
					   OnOk="CloseMessageDialog" />

		@* Add Role Modal *@
		@if (showAddRoleModal)
		{
			<div class="fixed inset-0 z-50 flex items-center justify-center p-4" style="position:fixed;inset:0;z-index:2000;">
				<div class="fixed inset-0 bg-black/40" style="position:fixed;inset:0;background-color:rgba(0,0,0,0.4);z-index:2000;" @onclick="CloseAddRoleModal"></div>
				<div class="w-full max-w-md mx-auto rounded-lg bg-content-light dark:bg-content-dark border border-border-light dark:border-border-dark shadow-xl" style="position:relative;z-index:2001;max-height:90vh;overflow-y:auto;">
					<div class="px-6 py-4 border-b border-border-light dark:border-border-dark">
						<h2 class="text-lg font-semibold text-text-light dark:text-text-dark">Yeni Rol Oluştur</h2>
						<p class="text-sm text-subtext-light dark:text-subtext-dark mt-1">Sisteme yeni bir rol eklemek için aşağıdaki bilgileri doldurun.</p>
					</div>
					<div class="p-6 space-y-4">
						<div>
							<label class="block text-sm font-medium text-text-light dark:text-text-dark mb-2">
								Rol Adı <span class="text-red-500">*</span>
							</label>
							<input @bind="modalRoleName"
								   placeholder="Örn: Admin, Editor, Viewer"
								   class="block w-full rounded-lg border border-border-light dark:border-border-dark bg-content-light dark:bg-content-dark px-4 py-3 text-text-light dark:text-text-dark placeholder-subtext-light dark:placeholder-subtext-dark transition-colors focus:outline-none focus:border-primary focus:ring-2 focus:ring-primary/20 hover:border-primary/50" />
							@if (string.IsNullOrWhiteSpace(modalRoleName) && showModalValidation)
							{
								<p class="mt-1 text-sm text-red-500">Rol adı zorunludur.</p>
							}
						</div>
						<div>
							<label class="block text-sm font-medium text-text-light dark:text-text-dark mb-2">
								Açıklama
							</label>
							<textarea @bind="modalRoleDescription"
									  rows="3"
									  placeholder="Bu rolün yetkilerini ve sorumluluklarını kısaca açıklayın..."
									  class="block w-full rounded-lg border border-border-light dark:border-border-dark bg-content-light dark:bg-content-dark px-4 py-3 text-text-light dark:text-text-dark placeholder-subtext-light dark:placeholder-subtext-dark transition-colors focus:outline-none focus:border-primary focus:ring-2 focus:ring-primary/20 hover:border-primary/50 resize-none"></textarea>
						</div>
						@if (!string.IsNullOrWhiteSpace(modalFeedback))
						{
							<div class="text-sm text-red-500">@modalFeedback</div>
						}
					</div>
					<div class="px-6 py-4 flex justify-end gap-3 border-t border-border-light dark:border-border-dark">
						<button type="button"
								@onclick="CloseAddRoleModal"
								class="px-4 py-2 rounded-md border border-border-light dark:border-border-dark text-text-light dark:text-text-dark hover:bg-hover-light dark:hover:bg-hover-dark transition-colors">
							İptal
						</button>
						<button type="button"
								@onclick="CreateRoleFromModalAsync"
								disabled="@(string.IsNullOrWhiteSpace(modalRoleName) || isCreatingFromModal)"
								class="inline-flex items-center px-4 py-2 rounded-md bg-primary font-medium hover:bg-primary/90 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed transition-colors">
							@if (isCreatingFromModal)
							{
								<svg class="animate-spin -ml-1 mr-2 h-4 w-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
									<circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
									<path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
								</svg>
								<span>Oluşturuluyor...</span>
							}
							else
							{
								<span>Ekle</span>
							}
						</button>
					</div>
				</div>
			</div>
		}
	}
	else if (activeTab == "permissions")
	{
		<div class="text-sm text-subtext-light dark:text-subtext-dark bg-content-light dark:bg-content-dark border border-border-light dark:border-border-dark rounded-lg p-6">Permission management coming soon.</div>
	}
	else
	{
		<div class="text-sm text-subtext-light dark:text-subtext-dark bg-content-light dark:bg-content-dark border border-border-light dark:border-border-dark rounded-lg p-6">User creation coming soon.</div>
	}
</div>

@code {
	[Inject] IRoleQueries RoleQueries { get; set; } = default!;
	[Inject] IRoleCommands RoleCommands { get; set; } = default!;
	[Inject] IJSRuntime JS { get; set; } = default!;

	string activeTab = "role";

	List<RoleDto> roles = new();

	RoleDto? editRole;
	string? editRoleName;
	string? editRoleDescription;
	bool loadingRoles;
	bool showDeleteModal;
	Guid? deleteTargetId;
	string? deleteTargetName;

	// Modal için değişkenler
	bool showAddRoleModal;
	string? modalRoleName;
	string? modalRoleDescription;
	bool showModalValidation;
	bool isCreatingFromModal;
	string? modalFeedback;

	// MessageDialog için değişkenler
	bool showMessageDialog;
	string? messageTitle;
	string? messageContent;
	MessageType messageType;

	string GetTabClass(string tab)
		=> (activeTab == tab)
			? "inline-flex items-center gap-2 rounded-md bg-primary/10 text-primary px-3 py-2 text-sm"
			: "inline-flex items-center gap-2 rounded-md px-3 py-2 text-sm text-subtext-light dark:text-subtext-dark hover:bg-primary/10 hover:text-primary";

	void SetTab(string tab) => activeTab = tab;

	protected override async Task OnInitializedAsync()
	{
		await LoadRolesAsync();
	}

	async Task LoadRolesAsync()
	{
		loadingRoles = true;
		try
		{
			roles = (await RoleQueries.GetAllAsync()).ToList();
		}
		finally
		{
			loadingRoles = false;
		}
		StateHasChanged();
	}

	void OpenAddRoleModal()
	{
		showAddRoleModal = true;
		modalRoleName = null;
		modalRoleDescription = null;
		showModalValidation = false;
		modalFeedback = null;
		StateHasChanged();
	}

	void CloseAddRoleModal()
	{
		showAddRoleModal = false;
		modalRoleName = null;
		modalRoleDescription = null;
		showModalValidation = false;
		isCreatingFromModal = false;
		modalFeedback = null;
		StateHasChanged();
	}

	async Task CreateRoleFromModalAsync()
	{
		showModalValidation = true;

		if (string.IsNullOrWhiteSpace(modalRoleName))
		{
			StateHasChanged();
			return;
		}

		isCreatingFromModal = true;
		modalFeedback = null;
		StateHasChanged();

		try
		{
			await RoleCommands.CreateAsync(modalRoleName!, modalRoleDescription);
			CloseAddRoleModal();
			await LoadRolesAsync();
		}
		catch (Exception ex)
		{
			modalFeedback = $"Rol oluşturulamadı: {ex.Message}";
		}
		finally
		{
			isCreatingFromModal = false;
			StateHasChanged();
		}
	}

	void BeginEditRole(RoleDto r)
	{
		editRole = r;
		editRoleName = r.Name;
		editRoleDescription = r.Description;
	}

	void CancelEditRole()
	{
		editRole = null;
		editRoleName = null;
		editRoleDescription = null;
	}

	async Task SaveEditAsync(Guid id)
	{
		if (editRole is null) return;
		try
		{
			await RoleCommands.UpdateAsync(id, editRoleName ?? string.Empty, editRoleDescription);
		}
		catch (Exception ex)
		{
			ShowMessage("Rol güncellenemedi.", $"Lütfen bilgileri kontrol edin ve tekrar deneyin. <br>{ex.Message}", MessageType.Error);
		}
		finally
		{
			CancelEditRole();
			await LoadRolesAsync();
		}
	}

	void OpenDeleteModal(Guid id, string name)
	{
		deleteTargetId = id;
		deleteTargetName = name;
		showDeleteModal = true;
	}

	void CloseDeleteModal()
	{
		showDeleteModal = false;
		deleteTargetId = null;
		deleteTargetName = null;
	}

	async Task ConfirmDeleteAsync()
	{
		if (deleteTargetId is null)
			return;

		var deleted = await RoleCommands.DeleteIfNoUsersAsync(deleteTargetId.Value);
		if (deleted)
		{
			CloseDeleteModal();
			await LoadRolesAsync();
		}
	}

	// MessageDialog için metodlar
	void ShowMessage(string title, string message, MessageType type)
	{
		messageTitle = title;
		messageContent = message;
		messageType = type;
		showMessageDialog = true;
		StateHasChanged();
	}

	void CloseMessageDialog()
	{
		showMessageDialog = false;
		messageTitle = null;
		messageContent = null;
		StateHasChanged();
	}
}