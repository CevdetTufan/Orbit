@page "/hesabim"
@using System.Security.Claims
@using Orbit.Domain.Security
@using Orbit.Application.Auth
@inject AuthenticationStateProvider AuthStateProvider
@inject ILoginAttemptQueries LoginAttemptQueries
@inject Orbit.Web.Security.CircuitAuthenticationStateProvider CircuitAuth
@inject NavigationManager Nav

<div class="container mx-auto p-0">
    <section class="mb-6 bg-content-light/80 dark:bg-content-dark/80 backdrop-blur border border-border-light dark:border-border-dark rounded-lg px-4 py-5 flex items-center gap-3">
        <div class="h-12 w-12 rounded-full bg-primary/10 text-primary grid place-items-center font-semibold">@AvatarInitial</div>
        <div class="flex-1">
            <h1 class="text-2xl font-bold">Hesabim</h1>
            <p class="text-sm text-subtext-light dark:text-subtext-dark">Bilgilerinizi ve giris gecmisinizi yonetin.</p>
        </div>
    </section>

    @if (loading)
    {
        <div class="rounded-lg border border-dashed border-border-light dark:border-border-dark p-6 text-sm text-subtext-light dark:text-subtext-dark">Yukleniyor...</div>
    }
    else
    {
        <div class="space-y-6">
            <DataGrid TItem="LoginAttempt" Context="row"
                          Items="@attempts"
                          Title="Giris Gecmisi"
                          TotalCount="@totalCount"
                          PageIndex="@pageIndex"
                          PageIndexChanged="@(i => pageIndex = i)"
                          PageSize="@pageSize"
                          PageSizeChanged="@(s => pageSize = s)"
                          OnPageChange="HandleGridPageChange"
                          EnablePaging="true"
                          EnablePageSizeSelector="true"
                          EnableEdit="false"
                          EnableDelete="false"
                          Loading="@loading">
                    <HeaderTemplate>
                        <th scope="col" class="px-6 py-3 w-48">Tarih (UTC)</th>
                        <th scope="col" class="px-6 py-3 w-24">Durum</th>
                        <th scope="col" class="px-6 py-3 w-24">IP</th>
                        <th scope="col" class="px-6 py-3">Tarayici</th>
                    </HeaderTemplate>
                    <RowTemplate>
                        <td class="px-6 py-2 whitespace-nowrap">@row.AttemptedAtUtc.ToString("yyyy-MM-dd HH:mm:ss")</td>
                        <td class="px-6 py-2">
                            @if (row.IsSuccessful)
                            {
                                <span class="bg-green-100 text-green-800 text-xs font-medium px-2.5 py-0.5 rounded-full dark:bg-green-900 dark:text-green-300">Evet</span>
                            }
                            else
                            {
                                <span class="bg-red-100 text-red-800 text-xs font-medium px-2.5 py-0.5 rounded-full dark:bg-red-900 dark:text-red-300">Hayir</span>
                            }
                        </td>
                        <td class="px-6 py-2">@row.RemoteIp</td>
                        <td class="px-6 py-2 truncate" title="@row.UserAgent">@row.UserAgent</td>
                    </RowTemplate>
                </DataGrid>
        </div>
    }
</div>

@code {
    bool loading = true;
    string username = string.Empty;
    string email = string.Empty;
    List<LoginAttempt> attempts = new();

    int pageIndex = 0;
    int pageSize = 10;
    int totalCount = 0;

    string AvatarInitial => string.IsNullOrWhiteSpace(username) ? "?" : username.Trim()[0].ToString().ToUpperInvariant();

    protected override async Task OnInitializedAsync()
    {
        var state = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = state.User;
        username = user.FindFirstValue(ClaimTypes.Name) ?? string.Empty;
        email = user.FindFirstValue(ClaimTypes.Email) ?? string.Empty;

        await LoadPageAsync();
    }

    async Task LoadPageAsync()
    {
        loading = true;
        try
        {
            if (string.IsNullOrWhiteSpace(username))
            {
                attempts.Clear();
                totalCount = 0;
                return;
            }

            totalCount = await LoginAttemptQueries.CountAsync(username);
            var list = await LoginAttemptQueries.GetPageAsync(username, pageIndex, pageSize);
            attempts = list.ToList();
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }

    async Task HandleGridPageChange((int pageIndex, int pageSize) e)
    {
        pageIndex = e.pageIndex;
        pageSize = e.pageSize;
        await LoadPageAsync();
    }

    async Task LogoutAsync()
    {
        await CircuitAuth.SignOutAsync();
        Nav.NavigateTo("/login");
    }
}

