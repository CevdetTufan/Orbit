@page "/hesabim"
@using System.Security.Claims
@using Orbit.Domain.Security
@using Orbit.Application.Auth
@inject AuthenticationStateProvider AuthStateProvider
@inject ILoginAttemptQueries LoginAttemptQueries
@inject Orbit.Web.Security.CircuitAuthenticationStateProvider CircuitAuth
@inject NavigationManager Nav
@inject Orbit.Application.Account.IAccountService AccountService

<div class="w-full">
   <h1 class="text-3xl font-bold mb-8">Hesabım</h1>

    <div class="mt-8">
        <div class="overflow-x-auto rounded-lg border border-border-light dark:border-border-dark bg-content-light dark:bg-content-dark">
            <table class="min-w-full divide-y divide-border-light dark:divide-border-dark">
                <tbody class="divide-y divide-border-light dark:divide-border-dark">

                    <!-- Kullanıcı Adı -->
                    <tr class="hover:bg-hover-light dark:hover:bg-hover-dark transition">
                        <td class="px-6 py-4 font-semibold text-gray-900 dark:text-gray-100 w-1/3">Kullanıcı Adı</td>
                        <td class="px-6 py-4 text-gray-700 dark:text-gray-300"></td>
                        <td class="px-6 py-4 text-right">
                            <button class="px-4 py-2 rounded-md bg-blue-500 hover:bg-blue-600 text-white text-sm">Düzenle</button>
                        </td>
                    </tr>

                    <!-- Mail - Mail Değiştir -->
                    <tr class="hover:bg-hover-light dark:hover:bg-hover-dark transition">
                        <td class="px-6 py-4 font-semibold text-gray-900 dark:text-gray-100">E-posta</td>
                        <td class="px-6 py-4 text-gray-700 dark:text-gray-300"></td>
                        <td class="px-6 py-4 text-right">
                            <button class="px-4 py-2 rounded-md bg-amber-500 hover:bg-amber-600 text-white text-sm">Değiştir</button>
                        </td>
                    </tr>

                    <!-- Şifre - Şifre Değiştir -->
                    <tr class="hover:bg-hover-light dark:hover:bg-hover-dark transition">
                        <td class="px-6 py-4 font-semibold text-gray-900 dark:text-gray-100">Şifre</td>
                        <td class="px-6 py-4 text-gray-700 dark:text-gray-300">********</td>
                        <td class="px-6 py-4 text-right">
                            <button class="px-4 py-2 rounded-md bg-rose-500 hover:bg-rose-600 text-white text-sm">Şifreyi Değiştir</button>
                        </td>
                    </tr>

                    <!-- Role -->
                    <tr class="hover:bg-hover-light dark:hover:bg-hover-dark transition">
                        <td class="px-6 py-4 font-semibold text-gray-900 dark:text-gray-100">Rol</td>
                        <td class="px-6 py-4 text-gray-700 dark:text-gray-300"></td>
                        <td class="px-6 py-4 text-right">
                            <button class="px-4 py-2 rounded-md bg-green-500 hover:bg-green-600 text-white text-sm">Rolü Değiştir</button>
                        </td>
                    </tr>

                </tbody>
            </table>
        </div>
    </div>


    @if (loading)
    {
        <div class="rounded-lg border border-dashed border-border-light dark:border-border-dark p-6 text-sm text-subtext-light dark:text-subtext-dark">Yukleniyor...</div>
    }
    else
    {
        <div class="mt-8">
            <div class="overflow-x-auto rounded-lg border border-border-light dark:border-border-dark bg-content-light dark:bg-content-dark">
            <DataGrid TItem="LoginAttempt" Context="row"
                          Items="@attempts"
                          Title="Giriş Geçmişi"
                          TotalCount="@totalCount"
                          PageIndex="@pageIndex"
                          PageIndexChanged="@(i => pageIndex = i)"
                          PageSize="@pageSize"
                          PageSizeChanged="@(s => pageSize = s)"
                          OnPageChange="HandleGridPageChange"
                          EnablePaging="true"
                          EnablePageSizeSelector="true"
                          EnableEdit="false"
                          EnableDelete="false"
                          Loading="@loading">
                    <HeaderTemplate>
                        <th scope="col" class="px-6 py-3 w-48">Tarih (UTC)</th>
                        <th scope="col" class="px-6 py-3 w-24">Durum</th>
                        <th scope="col" class="px-6 py-3 w-24">IP</th>
                        <th scope="col" class="px-6 py-3">Tarayici</th>
                    </HeaderTemplate>
                    <RowTemplate>
                        <td class="px-6 py-2 whitespace-nowrap">@row.AttemptedAtUtc.ToString("yyyy-MM-dd HH:mm:ss")</td>
                        <td class="px-6 py-2">
                            @if (row.IsSuccessful)
                            {
                                <span class="bg-green-100 text-green-800 text-xs font-medium px-2.5 py-0.5 rounded-full dark:bg-green-900 dark:text-green-300">Evet</span>
                            }
                            else
                            {
                                <span class="bg-red-100 text-red-800 text-xs font-medium px-2.5 py-0.5 rounded-full dark:bg-red-900 dark:text-red-300">Hayir</span>
                            }
                        </td>
                        <td class="px-6 py-2">@row.RemoteIp</td>
                        <td class="px-6 py-2 truncate" title="@row.UserAgent">@row.UserAgent</td>
                    </RowTemplate>
                </DataGrid></div></div>
    }
</div>

@code {
    bool loading = true;
    string username = string.Empty;
    string email = string.Empty;
    List<string> roles = new();
    List<LoginAttempt> attempts = new();

    int pageIndex = 0;
    int pageSize = 10;
    int totalCount = 0;

    string AvatarInitial => string.IsNullOrWhiteSpace(username) ? "?" : username.Trim()[0].ToString().ToUpperInvariant();

    protected override async Task OnInitializedAsync()
    {
        var state = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = state.User;
        username = user.FindFirstValue(ClaimTypes.Name) ?? string.Empty;
        email = user.FindFirstValue(ClaimTypes.Email) ?? string.Empty;
        roles = user.FindAll(ClaimTypes.Role).Select(c => c.Value).ToList();

        await LoadPageAsync();
    }

    async Task LoadPageAsync()
    {
        loading = true;
        try
        {
            if (string.IsNullOrWhiteSpace(username))
            {
                attempts.Clear();
                totalCount = 0;
                return;
            }

            totalCount = await LoginAttemptQueries.CountAsync(username);
            var list = await LoginAttemptQueries.GetPageAsync(username, pageIndex, pageSize);
            attempts = list.ToList();
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }

    async Task HandleGridPageChange((int pageIndex, int pageSize) e)
    {
        pageIndex = e.pageIndex;
        pageSize = e.pageSize;
        await LoadPageAsync();
    }

    async Task LogoutAsync()
    {
        await CircuitAuth.SignOutAsync();
        Nav.NavigateTo("/login");
    }

    string feedback = string.Empty;
    bool showEmailModal = false;
    bool showPasswordModal = false;

    EmailModel emailModel = new();
    PasswordModel pwdModel = new();

    async Task SubmitEmailChangeAsync()
    {
        try
        {
            await AccountService.UpdateEmailAsync(username, emailModel.NewEmail);
            email = emailModel.NewEmail;
            feedback = "E‑posta başarıyla güncellendi.";
            showEmailModal = false;
            emailModel = new();
        }
        catch (Exception ex)
        {
            feedback = $"E‑posta güncellenemedi: {ex.Message}";
        }
    }

    async Task SubmitPasswordChangeAsync()
    {
        if (pwdModel.NewPassword != pwdModel.ConfirmNewPassword)
        {
            feedback = "Yeni şifreler eşleşmiyor.";
            return;
        }

        try
        {
            await AccountService.ChangePasswordAsync(username, pwdModel.CurrentPassword, pwdModel.NewPassword);
            feedback = "Şifre başarıyla güncellendi.";
            showPasswordModal = false;
            pwdModel = new();
        }
        catch (Exception ex)
        {
            feedback = $"Şifre güncellenemedi: {ex.Message}";
        }
    }

    class EmailModel
    {
        [System.ComponentModel.DataAnnotations.Required(ErrorMessage = "E‑posta zorunludur.")]
        [System.ComponentModel.DataAnnotations.EmailAddress(ErrorMessage = "Geçerli bir e‑posta giriniz.")]
        public string NewEmail { get; set; } = string.Empty;
    }

    class PasswordModel
    {
        [System.ComponentModel.DataAnnotations.Required(ErrorMessage = "Mevcut şifre zorunludur.")]
        public string CurrentPassword { get; set; } = string.Empty;

        [System.ComponentModel.DataAnnotations.Required(ErrorMessage = "Yeni şifre zorunludur.")]
        [System.ComponentModel.DataAnnotations.MinLength(6, ErrorMessage = "En az 6 karakter olmalıdır.")]
        public string NewPassword { get; set; } = string.Empty;

        [System.ComponentModel.DataAnnotations.Required(ErrorMessage = "Yeni şifre tekrar zorunludur.")]
        public string ConfirmNewPassword { get; set; } = string.Empty;
    }
}

